#! /usr/bin/env python3

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

import sys
import socket
import argparse

SOCKET_HOST = 'localhost'
SOCKET_PORT = 58732
VERSION = '0.1.0-next'


def error (*args, sock=None):
    print('error:', *args, file=sys.stderr)
    if sock:
        sock.shutdown(socket.SHUT_RDWR)
    sys.exit(1)


def send (data):
    addr = (SOCKET_HOST, SOCKET_PORT)
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.settimeout(1)
    s.connect(addr)

    sent = 0
    while sent < len(data):
        try:
            new_sent = s.send(data[sent:])
        except Exception as e:
            error('while sending:', e, sock=s)
        else:
            if new_sent == 0:
                error('server unreachable', sock=s)
            sent += new_sent
    s.shutdown(socket.SHUT_WR)

    chunks = []
    have = 0
    while have < 4:
        try:
            chunk = s.recv(4 - have)
        except Exception as e:
            error('while receiving:', e, sock=s)
        else:
            if chunk == b'':
                error('server unreachable', sock=s)
            chunks.append(chunk)
            have += len(chunk)
    s.shutdown(socket.SHUT_RD)
    s.close()

    if b''.join(chunks) != b'ack\n':
        error('server returned unexpected reply')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        error('missing COMMAND argument')

    p = argparse.ArgumentParser(description='''
Make changes to ongoing timings.  Start the server first with `tellmewhend' -
see the README file for general usage details.

For help on commands, run `%(prog)s COMMAND --help'.
                                ''')
    p.add_argument('--version', action='version', version='%(prog)s ' + VERSION)
    subparsers = p.add_subparsers()

    sp = subparsers.add_parser('start', help='start or reset an event timer',
                               description='''
Start the timer for an event.  After running this, the event's command will run
at fixed intervals, for each defined trigger, as configured on the server.  If
the event is already running, its timer is reset.
                               ''')
    sp.set_defaults(command='start')
    sp.add_argument('event', help='''
name of the event to start, as defined in the server configuration file
                    ''')
    sp = subparsers.add_parser('cancel', help='cancel one or all event timers',
                               description='''
Stop the timer for an event, if running.  The command configured for the event
will not be run again until the event timer is started.  If an event is not
specified, this command cancels timers for all currently running events.
                               ''')
    sp.set_defaults(command='cancel')
    sp.add_argument('event', nargs='?', help='''
name of the event to start, as defined in the server configuration file
                    ''')

    args = p.parse_args()
    if args.command == 'start':
        send(b'start ' + args.event.encode('utf-8'))
    elif args.command == 'cancel':
        if args.event is None:
            send(b'cancel')
        else:
            send(b'cancel ' + args.event.encode('utf-8'))
