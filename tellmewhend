#! /usr/bin/env python3

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

import sys
from distutils import sysconfig
import os
import signal
import socketserver
import threading
import queue

_LIB_PREFIX = '.' # this line gets replaced at build time
sys.path.append(sysconfig.get_python_lib(prefix=_LIB_PREFIX))

import tellmewhen
option_defns = tellmewhen.option.option_defns


def on_quit (queue, thread, server):
    """exit signal handler

queue: for sending commands to the worker thread
thread: worker thread
server: socket server
"""
    queue.put('quit')
    thread.join()
    server.server_close()
    sys.exit(0)


class RequestHandler(socketserver.BaseRequestHandler):
    """server accepting commands

queue: for sending commands to the worker thread
args, kwargs: as taken by `socketserver.BaseRequestHandler`
"""

    def __init__ (self, queue, *args, **kwargs):
        self._queue = queue
        socketserver.BaseRequestHandler.__init__(self, *args, **kwargs)

    def invalid (self, msg):
        tellmewhen.log('received invalid request:', msg)

    def handle (self):
        raw_data, socket = self.request
        try:
            data = raw_data.decode('utf-8')
        except UnicodeDecodeError:
            self.invalid('not valid UTF-8')
        else:
            self._queue.put(data)
            socket.sendto(b'ack\n', self.client_address)


if __name__ == '__main__':
    event_defns, options = tellmewhen.cli.parse_args()
    queue = queue.Queue()
    thread = threading.Thread(target=tellmewhen.worker.run,
                              args=(event_defns, options, queue))
    server = socketserver.UDPServer(
        (options[option_defns.socket_host], options[option_defns.socket_port]),
        lambda *args, **kwargs: RequestHandler(queue, *args, **kwargs))

    for sig in (signal.SIGTERM, signal.SIGINT):
        signal.signal(sig, lambda *args: on_quit(queue, thread, server))

    thread.start()
    server.serve_forever()
